{
  "_args": [
    [
      {
        "raw": "r-script",
        "scope": null,
        "escapedName": "r-script",
        "name": "r-script",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Applications/MAMP/htdocs/breathTakingApp"
    ]
  ],
  "_from": "r-script@latest",
  "_id": "r-script@0.0.3",
  "_inCache": true,
  "_location": "/r-script",
  "_nodeVersion": "5.8.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/r-script-0.0.3.tgz_1458796253460_0.6828522188588977"
  },
  "_npmUser": {
    "name": "joshkatz",
    "email": "yocko2@gmail.com"
  },
  "_npmVersion": "3.7.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "r-script",
    "scope": null,
    "escapedName": "r-script",
    "name": "r-script",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/r-script/-/r-script-0.0.3.tgz",
  "_shasum": "454ae9f366edf071a4867d3bb65c93c1a78bc421",
  "_shrinkwrap": null,
  "_spec": "r-script",
  "_where": "/Applications/MAMP/htdocs/breathTakingApp",
  "author": {
    "name": "Josh Katz"
  },
  "bugs": {
    "url": "http://github.com/joshkatz/r-script/issues"
  },
  "dependencies": {
    "underscore": "^1.8.3"
  },
  "description": "A simple little module for passing data from NodeJS to R (and back again).",
  "devDependencies": {
    "queue-async": "^1.0.7"
  },
  "directories": {},
  "dist": {
    "shasum": "454ae9f366edf071a4867d3bb65c93c1a78bc421",
    "tarball": "https://registry.npmjs.org/r-script/-/r-script-0.0.3.tgz"
  },
  "gitHead": "44dd29fa433e4059382ddb91e8588ab05c8e6e62",
  "homepage": "http://github.com/joshkatz/r-script",
  "keywords": [
    "R",
    "rstats",
    "statistics"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "joshkatz",
      "email": "yocko2@gmail.com"
    }
  ],
  "name": "r-script",
  "optionalDependencies": {},
  "readme": "# r-script\n\nA simple little module for passing data from NodeJS to R (and back again).\n\nData passed from node is converted into a list and loaded into the R environment as the variable `input`. No special syntax in R is needed. For better portability/reliability, it's recommended to load packages with [`needs`](https://github.com/joshkatz/needs) (comes packaged inside the module â€” no installation required).\n\n### Installation\n```\nnpm install r-script\n```\n\n### Example\n\n```js\nvar R = require(\"r-script\");\n```\n\n##### Synchronous\n```javascript\n// example.js\n\nvar out = R(\"ex-sync.R\")\n  .data(\"hello world\", 20)\n  .callSync();\n  \nconsole.log(out);\n\n// [ 'oedorlwlh l', 'oldlrhelwo ', 'erllol dhow', ' lwrellodoh', 'holdlerw ol',\n//   'lrlewdhol o', 'lll wohdeor', 'hwrlledl oo', 'elrooh lwld', 'ewrlo lhdlo',\n//   'hlloroelwd', 'h eodollwlr', 'wr ldleohlo', 'or ohldlwel', 'lohe lowlrd',\n//   'rhdwoelllo ', 'owhorldell ', 'rlle ohdolw', 'rhlwolle od', 'woro helldl' ]\n```\n\n```r\n# ex-sync.R\nneeds(magrittr)\nset.seed(512)\ndo.call(rep, input) %>% \n  strsplit(NULL) %>% \n  sapply(sample) %>% \n  apply(2, paste, collapse = \"\")\n```\n\n\n##### Asynchronous\n\n```javascript\n// example.js\n\nvar attitude = JSON.parse(\n  require(\"fs\").readFileSync(\"example/attitude.json\", \"utf8\"));\n\nR(\"example/ex-async.R\")\n  .data({df: attitude, nGroups: 3, fxn: \"mean\" })\n  .call(function(err, d) {\n    if (err) throw err;\n    console.log(d);\n  });\n  \n// [ { group: '(40,55]', rating: 46.7143, advance: 41.1429 },\n//   { group: '(55,70]', rating: 64.6154, advance: 41.9231 },\n//   { group: '(70,85]', rating: 77.2, advance: 45.5 } ]\n```\n\n```r\n# ex-async.R\nneeds(dplyr)\nattach(input[[1]])\n\nreturn(\"early returns are ignored\")\ncat(\"so are undirected calls to cat\")\nprint(\"or print\")\ncat(\"unless directed to a file\", file = \"out.Rout\")\n\n# output of final expression is returned to node\ndf %>% \n  mutate(group = cut(rating, nGroups, ordered = T)) %>% \n  group_by(group) %>% \n  summarize_each(funs_(fxn)) %>%\n  select(group, rating, advance) %>%\n  mutate(group = as.character(group))\n```\n\n### Syntax\n\n**R**(_path_)\n\nCreates a new object that will source the R script specified by _path_.\n\nR.**data**(...)\n\nAdds data to the object and returns itself. You can give any number of arguments of different types. \n\nR.**call**([_options_], _callback_)\n\nCalls R. Any previously supplied _data_ is stringified into JSON and passed to R, where it's converted into a list and loaded into the R environment as the variable `input`. On completion, the _callback_ is invoked with two arguments: any error and the output from R, parsed back into a Javascript object.\n\nAdditional arguments for the conversion from R to JSON can be specified as _options_ (see documentation for [```toJSON```](https://github.com/jeroenooms/jsonlite/blob/master/R/toJSON.R) from the R package `jsonlite` for defaults).\n\nR.**callSync**([_options_])\n\nThe same as above, but calls R synchronously.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/joshkatz/r-script.git"
  },
  "scripts": {},
  "version": "0.0.3"
}
