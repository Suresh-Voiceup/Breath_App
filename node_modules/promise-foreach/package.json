{
  "_args": [
    [
      {
        "raw": "promise-foreach",
        "scope": null,
        "escapedName": "promise-foreach",
        "name": "promise-foreach",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Applications/MAMP/htdocs/breathTakingApp"
    ]
  ],
  "_from": "promise-foreach@latest",
  "_id": "promise-foreach@1.0.23",
  "_inCache": true,
  "_location": "/promise-foreach",
  "_nodeVersion": "6.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/promise-foreach-1.0.23.tgz_1501623573022_0.8364680320955813"
  },
  "_npmUser": {
    "name": "saulsluz",
    "email": "saulsluz@gmail.com"
  },
  "_npmVersion": "4.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "promise-foreach",
    "scope": null,
    "escapedName": "promise-foreach",
    "name": "promise-foreach",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/promise-foreach/-/promise-foreach-1.0.23.tgz",
  "_shasum": "3b1bddcec08f697eeb33bb47721cc19847c28c86",
  "_shrinkwrap": null,
  "_spec": "promise-foreach",
  "_where": "/Applications/MAMP/htdocs/breathTakingApp",
  "author": {
    "name": "Saul Luz",
    "email": "saulsluz@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/saulsluz/promise-foreach/issues"
  },
  "dependencies": {},
  "description": "This is a simple implementation of foreach based on promises.",
  "devDependencies": {
    "mocha": "^3.4.2"
  },
  "directories": {},
  "dist": {
    "shasum": "3b1bddcec08f697eeb33bb47721cc19847c28c86",
    "tarball": "https://registry.npmjs.org/promise-foreach/-/promise-foreach-1.0.23.tgz"
  },
  "gitHead": "32a8e51d5db24a2a8e41fd9310427d8ccd777f6d",
  "homepage": "https://github.com/saulsluz/promise-foreach#readme",
  "keywords": [
    "promise",
    "foreach",
    "async"
  ],
  "license": "MIT",
  "main": "promise-foreach.js",
  "maintainers": [
    {
      "name": "saulsluz",
      "email": "saulsluz@gmail.com"
    }
  ],
  "name": "promise-foreach",
  "optionalDependencies": {},
  "readme": "# promise-foreach\nThis is a simple implementation of foreach based on promises.\n\nWorks great in the browser with [browserify](http://github.com/substack/node-browserify).\n\n### Installation\n`$ npm install promise-foreach`\n\n### Usage\n###### Simple case\n```javascript\nconst promiseForeach = require('promise-foreach')\n\nconst list = [{\n  firstName: 'John',\n  lastName: 'Doe'\n}, {\n  firstName: 'Marie',\n  lastName: 'Doe'\n}]\n\npromiseForeach.each(list,\n  person => {\n    return `${person.firstName} ${person.lastName}`\n  },\n  (arrResult, person) => {\n    return {\n      firstName: person.firstName,\n      lastName: person.lastName,\n      fullName: arrResult[0]\n    }\n  },\n  (err, newList) => {\n    if (err) {\n      console.error(err)\n      return ;\n    }\n    console.log('newList : ', newList)\n  })\n```\n\n###### Complex case\n```javascript\nconst https = require('https');\nconst promiseForeach = require('promise-foreach')\n\nconst list = [{\n  firstName: 'John',\n  lastName: 'Doe',\n  photo_id: 1\n}, {\n  firstName: 'Marie',\n  lastName: 'Doe',\n  photo_id: 2\n}]\n\npromiseForeach.each(list,\n  [\n    person => {\n      return `${person.firstName} ${person.lastName}`\n    },\n    person => {\n      return asyncGetPhoto(person.photo_id)\n    }\n  ],\n  (arrResult, person) => {\n    return {\n      firstName: person.firstName,\n      lastName: person.lastName,\n      fullName: arrResult[0],\n      photo: arrResult[1]\n    }\n  },\n  (err, newList) => {\n    if (err) {\n      console.error(err)\n      return ;\n    }\n    console.log('newList : ', newList)\n  })\n\nfunction asyncGetPhoto(photo_id) {\n  return new Promise(function (resolve, reject) {\n    var request = https.get('https://jsonplaceholder.typicode.com/photos/' + photo_id, function (response) {\n      var body = []\n      response.on('data', function (chunk) {\n        body.push(chunk)\n      })\n      response.on('end', function () {\n        resolve(JSON.parse(body.join('')))\n      })\n    })\n    request.on('error', function (err) {\n      reject(err)\n    })\n  })\n}\n```\n\n###### Concurrency case\n```javascript\nconst https = require('https');\nconst promiseForeach = require('promise-foreach')\n\nconst list = [{\n  firstName: 'John',\n  lastName: 'Doe',\n  photo_id: 1,\n  comment_id: 3\n}, {\n  firstName: 'Marie',\n  lastName: 'Doe',\n  photo_id: 2,\n  comment_id: 4\n}]\n\npromiseForeach.each(list,\n  [\n    person => {\n      return `${person.firstName} ${person.lastName}`\n    },\n    person => {\n      return asyncGetPhoto(person.photo_id)\n    },\n    person => {\n      return asyncGetComment(person.comment_id)\n    }\n  ],\n  (arrResult, person) => {\n    return {\n      firstName: person.firstName,\n      lastName: person.lastName,\n      fullName: arrResult[0],\n      photo: arrResult[1],\n      comment: arrResult[2]\n    }\n  },\n  (err, newList) => {\n    if (err) {\n      console.error(err)\n      return ;\n    }\n    console.log('newList : ', newList)\n  })\n\nfunction asyncGetPhoto(photo_id) {\n  return new Promise(function (resolve, reject) {\n    var request = https.get('https://jsonplaceholder.typicode.com/photos/' + photo_id, function (response) {\n      var body = []\n      response.on('data', function (chunk) {\n        body.push(chunk)\n      })\n      response.on('end', function () {\n        setTimeout(function () {\n          resolve(JSON.parse(body.join('')))\n        }, 1000)\n      })\n    })\n    request.on('error', function (err) {\n      reject(err)\n    })\n  })\n}\nfunction asyncGetComment(comment_id) {\n  return new Promise(function (resolve, reject) {\n    var request = https.get('https://jsonplaceholder.typicode.com/comments/' + comment_id, function (response) {\n      var body = []\n      response.on('data', function (chunk) {\n        body.push(chunk)\n      })\n      response.on('end', function () {\n        resolve(JSON.parse(body.join('')))\n      })\n    })\n    request.on('error', function (err) {\n      reject(err)\n    })\n  })\n}\n```\n\n###### Browser case\n`$ browserify -r promise-foreach > modules.js`\n\n```html\n<script src=\"modules.js\"></script>\n\n<script>\n  const promiseForeach = require('promise-foreach');\n</script>\n\n<script>\nconst list = [{\n  firstName: 'John',\n  lastName: 'Doe',\n  photo_id: 1\n}, {\n  firstName: 'Marie',\n  lastName: 'Doe',\n  photo_id: 2\n}]\n\npromiseForeach.each(list,\n  [\n    person => {\n      return `${person.firstName} ${person.lastName}`\n    },\n    person => {\n      return asyncGetPhoto(person.photo_id)\n    }\n  ],\n  (arrResult, person) => {\n    return {\n      firstName: person.firstName,\n      lastName: person.lastName,\n      fullName: arrResult[0],\n      photo: arrResult[1]\n    }\n  },\n  (err, newList) => {\n    if (err) {\n      console.error(err)\n      return ;\n    }\n    console.log('newList : ', newList)\n  })\n\nfunction asyncGetPhoto(photo_id){\n    return new Promise(function(resolve, reject){\n      var request = new Request('https://jsonplaceholder.typicode.com/photos/' + photo_id,{\n        method: 'GET'\n      })\n      fetch(request).then(function(response){\n        resolve(response.json())\n      })\n      .catch(function(error){\n        reject(error)\n      })\n    })\n  }\n</script>\n```\n\n### Tests\n\nTo run the package's test, first install the dependencies, then run `npm test`:\n\n```\n$ npm install\n$ npm test\n```\n\n### License\n\nMIT License\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/saulsluz/promise-foreach.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "1.0.23"
}
